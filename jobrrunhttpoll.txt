
import io.micronaut.http.client.HttpClient;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.HttpResponse;
import javax.inject.Singleton;

@Singleton
public class HttpPollingProcessor implements RecordProcessor<Record<String>, Record<String>> {
    private final HttpClient httpClient;

    public HttpPollingProcessor(HttpClient httpClient) {
        this.httpClient = httpClient;
    }

    @Override
    public Record<String> processRecord(Record<String> record) throws Exception {
        String serviceUrl = record.getPayload();

        try {
            HttpRequest<?> request = HttpRequest.GET(serviceUrl);
            HttpResponse<String> response = httpClient.toBlocking().exchange(request, String.class);
            return new StringRecord(record.getHeader(), "Polled " + serviceUrl + ": " + response.getBody().orElse("No Response"));
        } catch (Exception e) {
            return new StringRecord(record.getHeader(), "Failed to poll " + serviceUrl + ": " + e.getMessage());
        }
    }
}
