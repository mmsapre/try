import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Option;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;
import java.util.stream.Collectors;

public class JsonPathFilter {
    private final ObjectMapper objectMapper = new ObjectMapper();

    public String applyJsonPathArrayFiltering(String json, Set<String> arrayFields, Map<String, List<String>> filters) throws Exception {
        System.out.println("üöÄ Original JSON: " + json);

        Object document = Configuration.defaultConfiguration()
                .addOptions(Option.SUPPRESS_EXCEPTIONS) // Ignore missing fields
                .jsonProvider()
                .parse(json);

        boolean isArray = document instanceof List;
        System.out.println("üîç JSON is " + (isArray ? "an array" : "a single object"));

        if (isArray) {
            List<Object> documentList = (List<Object>) document;
            List<Object> updatedList = documentList.stream()
                    .map(item -> {
                        System.out.println("\n--- Processing JSON Object ---");
                        return filterJsonObject(item, arrayFields, filters);
                    })
                    .collect(Collectors.toList());

            String result = objectMapper.writeValueAsString(updatedList);
            System.out.println("‚úÖ Final Filtered JSON: " + result);
            return result;
        } else {
            String result = objectMapper.writeValueAsString(filterJsonObject(document, arrayFields, filters));
            System.out.println("‚úÖ Final Filtered JSON: " + result);
            return result;
        }
    }

    private Object filterJsonObject(Object document, Set<String> arrayFields, Map<String, List<String>> filters) {
        System.out.println("üîç Processing Document: " + document);

        for (String field : arrayFields) {
            String jsonPath = "$." + field.replace("[].", "[*].");
            System.out.println("\nüîé Checking JSONPath: " + jsonPath);

            if (filters.containsKey(field)) {
                List<String> expectedValues = filters.get(field);
                String filterField = extractFilteringField(field);
                System.out.println("üîπ Filtering based on: " + filterField + " | Allowed Values: " + expectedValues);

                try {
                    List<Object> fullArray;
                    try {
                        fullArray = JsonPath.read(document, jsonPath);
                        System.out.println("üìå Extracted Array from JSONPath: " + fullArray);
                    } catch (Exception e) {
                        System.out.println("‚ö†Ô∏è Skipping missing path: " + jsonPath);
                        continue;
                    }

                    if (fullArray != null && !fullArray.isEmpty()) {
                        List<Object> filteredArray = fullArray.stream()
                                .filter(element -> {
                                    try {
                                        if (element instanceof Map) {
                                            Map<String, Object> obj = (Map<String, Object>) element;
                                            if (obj.containsKey(filterField)) {
                                                boolean isMatched = expectedValues.contains(obj.get(filterField).toString());
                                                System.out.println("üîé Checking: " + obj.get(filterField) + " | Matched: " + isMatched);
                                                return isMatched;
                                            }
                                        }
                                    } catch (Exception e) {
                                        System.out.println("‚ö†Ô∏è Error in filtering logic: " + e.getMessage());
                                        return false;
                                    }
                                    return false;
                                })
                                .collect(Collectors.toList());

                        System.out.println("‚úÖ Filtered Array: " + filteredArray);

                        String fullPath = jsonPath.replace("[*]", "");
                        if (!filteredArray.isEmpty()) {
                            System.out.println("üîÑ Updating JSON with Filtered Array...");
                            document = JsonPath.parse(document).set(fullPath, filteredArray).json();
                        } else {
                            System.out.println("‚ùå No matches found. Removing array: " + fullPath);
                            try {
                                document = JsonPath.parse(document).delete(fullPath).json();
                            } catch (Exception e) {
                                System.out.println("‚ö†Ô∏è Skipping delete for missing path: " + fullPath);
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è Skipping path due to error: " + jsonPath);
                }
            }
        }
        System.out.println("üìå JSON After Processing: " + document);
        return document;
    }

    private String extractFilteringField(String jsonPath) {
        if (jsonPath.contains(".")) {
            return jsonPath.substring(jsonPath.lastIndexOf(".") + 1);
        }
        return jsonPath;
    }
}
