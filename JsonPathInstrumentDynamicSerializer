import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.jayway.jsonpath.JsonPath;
import net.minidev.json.JSONArray;

import java.io.IOException;
import java.util.Map;

public class JsonPathInstrumentDynamicSerializer<T> extends StdSerializer<T> {
    private final Map<String, String> jsonPathFilters;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public JsonPathInstrumentDynamicSerializer(Map<String, String> jsonPathFilters) {
        super((Class<T>) Object.class);
        this.jsonPathFilters = jsonPathFilters;
    }

    @Override
    public void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException {
        if (value == null) {
            gen.writeNull();
            return;
        }

        // Convert the object to a JSON tree
        JsonNode rootNode = objectMapper.valueToTree(value);

        // Loop through JSONPath filters dynamically
        for (Map.Entry<String, String> entry : jsonPathFilters.entrySet()) {
            String jsonPathKey = entry.getKey(); // JSONPath to locate the field
            String jsonPathExpression = entry.getValue(); // JSONPath condition

            try {
                // Extract the matching `instrument` array using JSONPath
                Object extractedResult = JsonPath.read(objectMapper.writeValueAsString(rootNode), jsonPathKey);

                if (extractedResult instanceof JSONArray && !((JSONArray) extractedResult).isEmpty()) {
                    // Apply JSONPath filter to remove non-matching elements
                    Object filteredResult = JsonPath.read(extractedResult, jsonPathExpression);

                    // Convert filtered result back to JsonNode
                    JsonNode filteredNode = objectMapper.valueToTree(
                            filteredResult instanceof JSONArray ? filteredResult : new JSONArray());

                    // Dynamically update JSON structure
                    updateJsonTree(rootNode, jsonPathKey, filteredNode);
                }
            } catch (Exception e) {
                System.err.println("JSONPath Evaluation Error: " + e.getMessage());
            }
        }

        // Write only the filtered JSON tree
        gen.writeObject(rootNode);
    }

    /**
     * Updates the JSON tree dynamically based on JSONPath result.
     */
    private void updateJsonTree(JsonNode rootNode, String jsonPathKey, JsonNode filteredNode) {
        String[] pathParts = jsonPathKey.replace("$.","").split("\\.");
        ObjectNode currentNode = (ObjectNode) rootNode;
        
        for (int i = 0; i < pathParts.length - 1; i++) {
            JsonNode nextNode = currentNode.get(pathParts[i]);
            if (nextNode == null || !nextNode.isObject()) {
                return;
            }
            currentNode = (ObjectNode) nextNode;
        }

        // Replace the final key with the filtered JSON data
        currentNode.set(pathParts[pathParts.length - 1], filteredNode);
    }
}
